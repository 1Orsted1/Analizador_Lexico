
token scanner::num(){
 
int actual = 0,prior = udef ;
bool real_iniciado_cero = false;
while(actual != udef){
 char c = read();
  numero += c;
  prior = actual;
 switch (actual) {
    case 0:
	if(isdigit(c))
	  if(c == '0'){
	    real_iniciado_cero  = true;
	    actual = 1;
	  }else{
	  actual = 1;
	}
	else  actual = udef;
    break;
    case 1:
	if(real_iniciado_cero == false){
	  if(isdigit(c)) actual =1;
	  else if(c == '.') actual = 2;
	  else if(!isspace(c)){actual = 4;}
	  else actual = udef;
	}else {
	  if(c == '.') actual = 2;
	  else actual = 4;
	}
     break;
     case 2:
	if(isdigit(c)) actual = 3;
	else actual = udef;
     break;
     case 3:
	if(isdigit(c)) actual = 3;
	else if(!isspace(c)){ actual = 4;}
	else actual = udef;
     break;
     case 4:
	actual = udef;
     break;
    }

  }
  if(prior == 1 || prior == 3){
    fallback();
    success();
  }
  if (prior == 1)return _int;
  if (prior == 3)return _real;

  fail();
  return _err;
}


/*Aqui va el octal*/
bool scanner::oct(){
 
int actual = 0,prior = udef ;

while(actual != udef){
  
  char c = read();
  prior = actual;
  switch (actual) {
    case 0:
      if(c =='0')actual=1;
      else actual = udef; 
    break;
    case 1:
      try {
      int i = c -48;
      if(i >= 0 && i <  8)actual = 1;
      else actual = udef;
      } catch (int) {
      actual = udef;
      } 
      break;

    default:
    break;
 }
}
if(prior == 1){
  fallback();
  success();
  return true;
}
fail();
return false;
}

/**/




/*Aqui va el hexadecimal*/

bool scanner::hex(){
 
int actual = 0,prior = udef ;

while(actual != udef){
  
  char c = read();
  prior = actual;
  switch (actual) {
    case 0:
      if(c =='0')actual=1;
      else actual = udef; 
    break;
    case 1:
      if(c == 'x'||c == 'X')actual = 2;
      else actual = udef;
      break;
    case 2:
      if (isxdigit(c) != 0) actual = 3;
      else actual = udef;
    break; 
    case 3:
      if (isxdigit(c) != 0) actual = 4;
      else actual = udef;
    break; 
    case 4:
      if (isxdigit(c) != 0) actual = 3;
      else if(c == '_')actual = 3;
      else actual = udef;
    break; 
    default:
    break;
 }
}
if(prior == 4){
  fallback();
  success();
  return true;
}
fail();
return false;
}




Octales
053
034
01
Hexadecimales
0x34
0xA4f5
0xABCD
Enteros
1
12
123
Reales
24.0
0.0
0.365
3.1426



token scanner::opr(){
 
int actual = 0,prior = udef;

while(actual != udef){
 char c = read();
  prior = actual;

 switch (actual) {
  case 0:
    if(compararC(c)){
      if( c == '['  ){
	
      }
      if( c == ']'  ){

      }
      if( c == '('  ){

      }
      if( c == ')'  ){

      }
      if( c == '['  ){
	
      }
      if( c == ']'  ){

      }
      if( c == '('  ){

      }
      if( c == '['  ){
	
      }
      if( c == ']'  ){

      }
      if( c == '('  ){

      }
      if( c == ')'  ){

      }
      if(c == '-'){

      }

    }
    //else actual = udef;
  break;
  case 1:
    
  break;
  case 2:
    
  break;
  case 3:
  
  break;
  case 4:
  
  break;
  case 5:
  
  break;
  case 6:
  
  break;
  case 7:
  
  break;
  case 8:
  
  break;
  case 9:
  
  break;
  case 10:
  
  break;
  case 11:
  
  break;
  case 12:
  
  break;

 }
}
} 

 //string numero = get_word(1);
    //string oprts = get_word(2);
    //string palabra = get_word(0);
    //int renglon = get_row();



//otra forma de hacer lo del
/*
token scanner::reserved(){
  string tempWord = "";
  int actual = 0,prior = udef, i;
  while(actual != udef){
    char c = read();
    //numero += c;
    prior = actual;
    switch (actual) {
      case 0:
	if(isalpha(c)){tempWord += c; actual = 1;}
	else actual = udef;
	break;
      case 1:
	if (isalpha(c)){tempWord+=c;actual = 1;}
	else if(!isspace(c) && !compararC(c) &&  c != '#'){ actual = 2;}
	else{actual = udef;}
	break;
      case 2:
	actual = udef;
	break;
    }
  }


  if(prior == 1){
    if(tempWord == "print" || tempWord == "true" || tempWord == "false"){
      fallback();
      success();
      if(tempWord == "print"){
	return _print;
      }else if(tempWord == "true"){
	return _true;
      }else if(tempWord == "false"){
	return _false;
      }
    }
  }
  fail();
  return _err;
}
*/






